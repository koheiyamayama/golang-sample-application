// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: query.sql

package mysql

import (
	"context"
	"database/sql"
)

const getUserWithPosts = `-- name: GetUserWithPosts :many


select
    u.id as user_id,
    u.name as user_name,
    p.id as post_id,
    p.title as post_title,
    p.body as post_body,
    p.user_id as post_user_id
from users as u
    left join posts as p on u.id = p.user_id
where u.id = ?
`

type GetUserWithPostsRow struct {
	UserID     string
	UserName   string
	PostID     sql.NullString
	PostTitle  sql.NullString
	PostBody   sql.NullString
	PostUserID sql.NullString
}

// Active: 1692091993022@@127.0.0.1@3306@ks-laboratory-backend
func (q *Queries) GetUserWithPosts(ctx context.Context, userID string) ([]GetUserWithPostsRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserWithPosts, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserWithPostsRow
	for rows.Next() {
		var i GetUserWithPostsRow
		if err := rows.Scan(
			&i.UserID,
			&i.UserName,
			&i.PostID,
			&i.PostTitle,
			&i.PostBody,
			&i.PostUserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
